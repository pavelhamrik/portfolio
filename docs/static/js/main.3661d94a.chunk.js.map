{"version":3,"sources":["components/Button/Button.js","components/Header/Header.js","components/Grid/Grid.js","components/Footer/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["Button","react_default","a","createElement","href","className","Component","Header","Grid","this","props","children","GridItem","Footer","Grid_Grid_Grid","Grid_GridItem","App","components_Header_Header","components_Button_Button","components_Footer_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kVASeA,gMAJP,OAAOC,EAAAC,EAAAC,cAAA,KAAGC,KAAK,KAAKC,UAAU,UAAvB,kBAFMC,cCQNC,0LANP,OACIN,EAAAC,EAAAC,cAAA,+BAHSG,cCAfE,0LAOE,OACIP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAQI,KAAKC,MAAMC,iBAR3BL,cAabM,mLAEE,OACIX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAQI,KAAKC,MAAMC,iBAHvBL,aCKRO,0LAbP,OACIZ,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAACW,EAAD,KACIb,EAAAC,EAAAC,cAACY,EAAD,oBACAd,EAAAC,EAAAC,cAACY,EAAD,oBACAd,EAAAC,EAAAC,cAACY,EAAD,qBAJR,sCAHST,cCYNU,mLAVP,OACIf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,cANEb,aCIZc,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,aAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAyB,OAAMH,aAAN,sBAEP7B,GAiDV,SAAiCO,GAE/B0B,MAAM1B,GACHI,KAAK,SAAAuB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BT,OAAOC,SAASsC,aAKpBnC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEAsB,CAAwBnC,GAIxBC,UAAUC,cAAc8B,MAAM5B,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MCzCxBoC","file":"static/js/main.3661d94a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Button.scss';\n\nclass Button extends Component {\n    render() {\n        return <a href=\"#0\" className=\"Button\">Say Hi!</a>;\n    }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport './Header.scss';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>Header</header>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './Grid.scss';\n\nclass Grid extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     console.log(this.props)\n    // }\n\n    render() {\n        return (\n            <div className=\"Grid\">{this.props.children}</div>\n        );\n    }\n}\n\nclass GridItem extends Component {\n    render() {\n        return (\n            <div className=\"Item\">{this.props.children}</div>\n        );\n    }\n}\n\nexport {Grid, GridItem};","import React, { Component } from 'react';\nimport {Grid, GridItem} from './../Grid/Grid';\n\nimport './Footer.scss';\n\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <Grid>\n                    <GridItem>Grid Item 1</GridItem>\n                    <GridItem>Grid Item 2</GridItem>\n                    <GridItem>Grid Item 3</GridItem>\n                </Grid>\n                All that footer stuffâ€¦\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React, {Component} from 'react';\nimport './App.scss';\nimport Button from './components/Button/Button';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Header></Header>\n                <Button></Button>\n                <Footer></Footer>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}