@import './../../styles/settings';
@import './../../styles/mixins';


$grid-template-columns: '';
@for $col from 1 through $grid-columns {
    $grid-template-columns: $grid-template-columns + ' 1fr';
}

$grid-template-columns: unquote($grid-template-columns);


.Grid {
    margin: 0 auto;
    max-width: $grid-max-width;
    width: 100%;

    .grid-content {
        display: grid;
        grid-template-columns: $grid-template-columns;
        justify-content: space-around;
    }

    &.grid-compensated-gap .grid-content {
        margin-left: -($grid-gap / 2);
        margin-right: -($grid-gap / 2);
    }

    $alignments: (normal, stretch, center, start, end);
    @each $alignment in $alignments {
        &.grid-align-#{$alignment} .grid-content {
            align-items: $alignment;
        }
    }

    .GridItem {
        grid-column: span $grid-columns;
        padding-left: $grid-gap / 2;
        padding-right: $grid-gap / 2;
    }

    // column span

    @each $screen, $size in $breakpoints {
        @include breakpoint(#{$screen}) {
            @for $col from 1 through $grid-columns {
                $colfactor: $grid-columns / $col;
                @if $colfactor == round($colfactor) {
                    &.#{$screen}-#{$col}-cols .GridItem {
                        grid-column-start: auto;
                        grid-column-end: span #{$colfactor};
                    }
                }
            }
        }
    }

    // item-based styles

    @each $screen, $size in $breakpoints {
        @include breakpoint($screen) {
            @for $col from 1 through $grid-columns {
                & > .grid-content > .col-#{$screen}-#{$col} {
                    grid-column-start: auto;
                    grid-column-end: span #{$col};
                }

                & > .grid-content > .col-#{$screen}-offset-#{$col} {
                    grid-column-start: #{$col + 1} !important;
                }
            }
        }
    }
}

