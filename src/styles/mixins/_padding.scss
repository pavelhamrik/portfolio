@import '/../settings';
@import 'media-queries';

@mixin padding($screen: all, $dimensions: $paddings, $vertical-factor: 1, $horizontal-factor: 1) {
    padding: map-get(map-get($dimensions, $screen), vertical) * $vertical-factor map-get(map-get($dimensions, $screen), horizontal) * $horizontal-factor;
}

@mixin vertical-padding($screen: default) {
    $padding: map-get(map-get($paddings, $screen), vertical);
    padding-top: $padding;
    padding-bottom: $padding;
}

@mixin horizontal-padding($screen: default) {
    $padding: map-get(map-get($paddings, $screen), horizontal);
    padding-right: $padding;
    padding-left: $padding;
}

@mixin padding-top($screen: default) {
    padding-top: map-get(map-get($paddings, $screen), vertical);
}

@mixin padding-right($screen: default) {
    padding-top: map-get(map-get($paddings, $screen), horizontal);
}

@mixin padding-bottom($screen: default) {
    padding-bottom: map-get(map-get($paddings, $screen), vertical);
}

@mixin padding-left($screen: default) {
    padding-top: map-get(map-get($paddings, $screen), horizontal);
}

@mixin responsive-padding($screen: all, $vertical-factor: 1, $horizontal-factor: 1) {
    @each $screen, $size in $breakpoints {
        @if $screen == all {
            @include padding($vertical-factor: $vertical-factor, $horizontal-factor: $horizontal-factor);
        }
        @else {
            @include padding($screen: default, $vertical-factor: $vertical-factor, $horizontal-factor: $horizontal-factor);
            @include breakpoint($screen) {
                @include padding($screen, $vertical-factor: $vertical-factor, $horizontal-factor: $horizontal-factor);
            }
        }
    }
}